#include <stdio.h>
#include <stdlib.h>

//	A funcao celulaValida retorna verdadeiro se a celula (x, y) eh valida
//	Uma celula eh valida se ela esta dentro dos limites do mapa
int celulaValida(int n, int m, int x, int y)
{
	return (0 <= x && x < n && 0 <= y && y < m);
}

//	A funcao explorarMapa vai processar as celulas com distancia dist
void explorarMapa(int **mapa, int n, int m, int dist)
{
	//	dx e dy sao vetores auxiliares para facilitar o acesso a celulas vizinhas (adjacentes)
	//	dx significa delta x
	//	dy significa delta y
	int dx[] = {0, 1, 0, -1};
	int dy[] = {1, 0, -1, 0};

	for (int x = 0; x < n; x++)
		for (int y = 0; y < m; y++)
		{
			//	Se a celula (x, y) tiver distancia dist
			//	Devemos procurar por celulas vizinhas (adjacentes) para atualizar suas distancias
			if (mapa[x][y] == dist)
			{
				for (int k = 0; k < 4; k++)
				{
					//	xVizinho e yVizinho sao coordenadas de uma celula adjacente a (x, y)
					int xVizinho = x + dx[k];
					int yVizinho = y + dy[k];

					//	Se a celula adjacente a (x, y) for valida e ela nao tiver sido processada
					//	devemos atualizar sua distancia
					//	Obs : uma celula nao processada eh representada pelo valor 0
					if (celulaValida(n, m, xVizinho, yVizinho) && mapa[xVizinho][yVizinho] == 0)
						mapa[xVizinho][yVizinho] = dist + 1;
				}
			}
		}
}

int main()
{
	int n, m;
	scanf("%d %d", &n, &m);

	int **mapa = malloc(n * sizeof(int *));
	for (int i = 0; i < n; i++)
	{
		mapa[i] = malloc(m * sizeof(int));
		for (int j = 0; j < m; j++)
			scanf("%d", &mapa[i][j]);
	}

	int linhaA, colunaA;
	int linhaB, colunaB;
	scanf("%d %d %d %d", &linhaA, &colunaA, &linhaB, &colunaB);

	mapa[linhaB][colunaB] = 1;

	//	Iremos processar as celulas cujas distancias sao 1, 2, 3, ... ate n + m
	for (int i = 1; i <= 2 * (n + m); i++)
		explorarMapa(mapa, n, m, i);

	//	Imprimindo o mapa
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
			printf("%2d ", mapa[i][j]);
		printf("\n");
	}

	for (int i = 0; i < n; i++)
		free(mapa[i]);
	free(mapa);
}

/*

Exemplo de Entrada :

6 11
0  0 -1 -1  0  0  0  0  0  0  0
0 -1  0  0 -1  0 -1  0 -1 -1  0
0  0 -1  0 -1  0 -1  0  0  0 -1
0 -1  0 -1  0  0  0 -1 -1  0  0
0  0  0 -1  0 -1  0  0  0 -1  0
0 -1  0  0  0  0  0  0 -1  0  0
0 0
5 10

Exemplo de Saida :

26 27 -1 -1 12 11 10  9 10 11 12
25 -1  0  0 -1 12 -1  8 -1 -1 13
24 25 -1  0 -1 13 -1  7  6  5 -1
23 -1 21 -1 15 14 15 -1 -1  4  3
22 21 20 -1 16 -1 16 17 18 -1  2
23 -1 19 18 17 18 17 18 -1  2  1

*/