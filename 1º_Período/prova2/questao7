// Laura Fernandes Camargos-13692334
#include <stdio.h>
#include <stdlib.h>

int **ler_matriz(int n, int m);
int **subtrai_matrizes(int **mat, int **mat2, int n, int m);
void impimir_matriz(int **mat, int n, int m);
void liberar_matriz(int **mat, int n);

int **ler_matriz(int n, int m)
{
    int i, j;
    int **mat;
    mat = (int **)malloc(sizeof(int *));
    for (i = 0; i < n; i++)
    {
        mat[i] = (int *)malloc(sizeof(int));
        for (j = 0; j < m; j++)
        {
            scanf("%d", &mat[i][j]);
        }
    }
    liberar_matriz(mat, n);
    return mat;
}
int **subtrai_matrizes(int **mat, int **mat2, int n, int m)
{
    int i, j;
    int **matriz;
    matriz = (int **)malloc(sizeof(int *));
    for (i = 0; i < n; i++)
    {
        matriz[i] = (int *)malloc(sizeof(int));
        for (j = 0; j < m; j++)
        {
            matriz[i][j] = mat[i][j] - mat2[i][j];
        }
    }
    return matriz;
}
void impimir_matriz(int **mat, int n, int m)
{
    int i, j;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            printf("%d ", mat[i][j]);
        }
        printf("\n");
    }
    return;
}
void liberar_matriz(int **mat, int n)
{
    for (int i = 0; i < n; i++)
    {
        free(mat[i]);
    }
    free(mat);
    return;
}
int main()
{
    int N, M;
    scanf("%d %d", &N, &M);
    int **matriz1;
    int **matriz2;
    int **matrizsub;
    matriz1 = ler_matriz(N, M);
    matriz2 = ler_matriz(N, M);
    matrizsub = subtrai_matrizes(matriz1, matriz2, N, M);
    impimir_matriz(matrizsub, N, M);
    liberar_matriz(matrizsub, N);
    return 0;
}