// Copyright (C) 2021  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/10/2024 17:04:02"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          contador8b
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module contador8b_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLE_AR;
reg CLO_CK;
reg ENA_BLE;
// wires                                               
wire Q_0;
wire Q_1;
wire Q_2;
wire Q_3;
wire Q_4;
wire Q_5;
wire Q_6;
wire Q_7;

// assign statements (if any)                          
contador8b i1 (
// port map - connection between master ports and signals/registers   
	.CLE_AR(CLE_AR),
	.CLO_CK(CLO_CK),
	.ENA_BLE(ENA_BLE),
	.Q_0(Q_0),
	.Q_1(Q_1),
	.Q_2(Q_2),
	.Q_3(Q_3),
	.Q_4(Q_4),
	.Q_5(Q_5),
	.Q_6(Q_6),
	.Q_7(Q_7)
);
initial 
begin 
#1000000 $finish;
end 

// CLE_AR
initial
begin
	CLE_AR = 1'b1;
end 

// CLO_CK
always
begin
	CLO_CK = 1'b0;
	CLO_CK = #500 1'b1;
	#500;
end 

// ENA_BLE
initial
begin
	ENA_BLE = 1'b1;
end 
endmodule

